/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.Indexes;
import jooq.Keys;
import jooq.Public;
import jooq.enums.DocumentType;
import jooq.tables.DocumentContent.DocumentContentPath;
import jooq.tables.records.DocumentRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Document extends TableImpl<DocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.document</code>
     */
    public static final Document DOCUMENT = new Document();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentRecord> getRecordType() {
        return DocumentRecord.class;
    }

    /**
     * The column <code>public.document.document_id</code>.
     */
    public final TableField<DocumentRecord, UUID> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.document.title</code>.
     */
    public final TableField<DocumentRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.document.created_at</code>.
     */
    public final TableField<DocumentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.document.document_type</code>.
     */
    public final TableField<DocumentRecord, DocumentType> DOCUMENT_TYPE = createField(DSL.name("document_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(DocumentType.class), this, "");

    /**
     * The column <code>public.document.is_deleted</code>.
     */
    public final TableField<DocumentRecord, Boolean> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.document.deleted_at</code>.
     */
    public final TableField<DocumentRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    private Document(Name alias, Table<DocumentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Document(Name alias, Table<DocumentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.document</code> table reference
     */
    public Document(String alias) {
        this(DSL.name(alias), DOCUMENT);
    }

    /**
     * Create an aliased <code>public.document</code> table reference
     */
    public Document(Name alias) {
        this(alias, DOCUMENT);
    }

    /**
     * Create a <code>public.document</code> table reference
     */
    public Document() {
        this(DSL.name("document"), null);
    }

    public <O extends Record> Document(Table<O> path, ForeignKey<O, DocumentRecord> childPath, InverseForeignKey<O, DocumentRecord> parentPath) {
        super(path, childPath, parentPath, DOCUMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DocumentPath extends Document implements Path<DocumentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DocumentPath(Table<O> path, ForeignKey<O, DocumentRecord> childPath, InverseForeignKey<O, DocumentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DocumentPath(Name alias, Table<DocumentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DocumentPath as(String alias) {
            return new DocumentPath(DSL.name(alias), this);
        }

        @Override
        public DocumentPath as(Name alias) {
            return new DocumentPath(alias, this);
        }

        @Override
        public DocumentPath as(Table<?> alias) {
            return new DocumentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TITLE_IDX);
    }

    @Override
    public UniqueKey<DocumentRecord> getPrimaryKey() {
        return Keys.DOCUMENT_PKEY;
    }

    private transient DocumentContentPath _documentContent;

    /**
     * Get the implicit to-many join path to the
     * <code>public.document_content</code> table
     */
    public DocumentContentPath documentContent() {
        if (_documentContent == null)
            _documentContent = new DocumentContentPath(this, null, Keys.DOCUMENT_CONTENT__DOCUMENT_CONTENT_DOCUMENT_ID_FKEY.getInverseKey());

        return _documentContent;
    }

    @Override
    public Document as(String alias) {
        return new Document(DSL.name(alias), this);
    }

    @Override
    public Document as(Name alias) {
        return new Document(alias, this);
    }

    @Override
    public Document as(Table<?> alias) {
        return new Document(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(String name) {
        return new Document(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(Name name) {
        return new Document(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Document rename(Table<?> name) {
        return new Document(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Document where(Condition condition) {
        return new Document(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Document where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Document where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Document where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Document where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Document where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Document where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Document where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Document whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Document whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
