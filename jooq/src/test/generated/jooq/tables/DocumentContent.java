/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import jooq.Indexes;
import jooq.Keys;
import jooq.Public;
import jooq.tables.Document.DocumentPath;
import jooq.tables.records.DocumentContentRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DocumentContent extends TableImpl<DocumentContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.document_content</code>
     */
    public static final DocumentContent DOCUMENT_CONTENT = new DocumentContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentContentRecord> getRecordType() {
        return DocumentContentRecord.class;
    }

    /**
     * The column <code>public.document_content.content_id</code>.
     */
    public final TableField<DocumentContentRecord, UUID> CONTENT_ID = createField(DSL.name("content_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.document_content.document_id</code>.
     */
    public final TableField<DocumentContentRecord, UUID> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.document_content.content</code>.
     */
    public final TableField<DocumentContentRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private DocumentContent(Name alias, Table<DocumentContentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DocumentContent(Name alias, Table<DocumentContentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.document_content</code> table reference
     */
    public DocumentContent(String alias) {
        this(DSL.name(alias), DOCUMENT_CONTENT);
    }

    /**
     * Create an aliased <code>public.document_content</code> table reference
     */
    public DocumentContent(Name alias) {
        this(alias, DOCUMENT_CONTENT);
    }

    /**
     * Create a <code>public.document_content</code> table reference
     */
    public DocumentContent() {
        this(DSL.name("document_content"), null);
    }

    public <O extends Record> DocumentContent(Table<O> path, ForeignKey<O, DocumentContentRecord> childPath, InverseForeignKey<O, DocumentContentRecord> parentPath) {
        super(path, childPath, parentPath, DOCUMENT_CONTENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class DocumentContentPath extends DocumentContent implements Path<DocumentContentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> DocumentContentPath(Table<O> path, ForeignKey<O, DocumentContentRecord> childPath, InverseForeignKey<O, DocumentContentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private DocumentContentPath(Name alias, Table<DocumentContentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public DocumentContentPath as(String alias) {
            return new DocumentContentPath(DSL.name(alias), this);
        }

        @Override
        public DocumentContentPath as(Name alias) {
            return new DocumentContentPath(alias, this);
        }

        @Override
        public DocumentContentPath as(Table<?> alias) {
            return new DocumentContentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DOCUMENT_IDX);
    }

    @Override
    public UniqueKey<DocumentContentRecord> getPrimaryKey() {
        return Keys.DOCUMENT_CONTENT_PKEY;
    }

    @Override
    public List<ForeignKey<DocumentContentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DOCUMENT_CONTENT__DOCUMENT_CONTENT_DOCUMENT_ID_FKEY);
    }

    private transient DocumentPath _document;

    /**
     * Get the implicit join path to the <code>public.document</code> table.
     */
    public DocumentPath document() {
        if (_document == null)
            _document = new DocumentPath(this, Keys.DOCUMENT_CONTENT__DOCUMENT_CONTENT_DOCUMENT_ID_FKEY, null);

        return _document;
    }

    @Override
    public DocumentContent as(String alias) {
        return new DocumentContent(DSL.name(alias), this);
    }

    @Override
    public DocumentContent as(Name alias) {
        return new DocumentContent(alias, this);
    }

    @Override
    public DocumentContent as(Table<?> alias) {
        return new DocumentContent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentContent rename(String name) {
        return new DocumentContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentContent rename(Name name) {
        return new DocumentContent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DocumentContent rename(Table<?> name) {
        return new DocumentContent(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentContent where(Condition condition) {
        return new DocumentContent(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentContent where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentContent where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentContent where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentContent where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentContent where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentContent where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DocumentContent where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentContent whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DocumentContent whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
